package com.example.bfaa_submission_1

import android.util.Log
import androidx.lifecycle.LiveData
import androidx.lifecycle.MutableLiveData
import androidx.lifecycle.ViewModel
import com.loopj.android.http.AsyncHttpClient
import com.loopj.android.http.AsyncHttpResponseHandler
import cz.msebera.android.httpclient.Header
import org.json.JSONObject

class OrgsViewModel: ViewModel() {

    val listGitOrg = MutableLiveData<ArrayList<User>>()

    fun setUserOrg(username: String) {
        val listOrg = ArrayList<User>()

        val client = AsyncHttpClient()
        val url = "https://api.github.com/users/${username}/orgs"

        client.addHeader("Authorization", "token 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")
        client.addHeader("User-Agent", "request")

        client.get(url, object : AsyncHttpResponseHandler(){
            override fun onSuccess(statusCode: Int, headers: Array<Header>, responseBody: ByteArray) {

                /*Log.d(TAG, result)*/
                try {
                    val result = String(responseBody)
                    val responseObject = JSONObject(result)
                    val listOrgs = responseObject.getJSONArray("listOrgs")

                    for (i in 0 until listOrgs.length()) {
                        val jsonObject = listOrgs.getJSONObject(i)
                        val gitUserOrg = User()
                        gitUserOrg.company = jsonObject.getString("login")

                        listOrg.add(gitUserOrg)
                    }
                } catch (e:Exception) {
                    Log.d("Exception", e.message.toString())
                }
                listGitOrg.postValue(listOrg)
            }

            override fun onFailure(statusCode: Int, headers: Array<Header>, responseBody: ByteArray, error: Throwable) {
                Log.d("onFailure", error.message.toString())
            }
        })
    }

    fun getUserOrg() : LiveData<ArrayList<User>> {
        return listGitOrg
    }
}
